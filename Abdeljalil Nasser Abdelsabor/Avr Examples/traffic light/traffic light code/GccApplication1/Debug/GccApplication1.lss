
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ab  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000059a  00000000  00000000  0000085f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028b  00000000  00000000  00000df9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001084  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031b  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000119  00000000  00000000  000013c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>


int main(void)
{
    DDRA=0b00000111;
  6c:	87 e0       	ldi	r24, 0x07	; 7
  6e:	8a bb       	out	0x1a, r24	; 26
    uint8_t yellow;
    while (1) 
    {
	//for Green LED 
		PORTA=0b00000001;
  70:	31 e0       	ldi	r19, 0x01	; 1
		_delay_ms(15000);
		yellow=0;
		do{
		// yellow LED flashes 5 times 
			PORTA=0b00000010;
  72:	92 e0       	ldi	r25, 0x02	; 2
			_delay_ms(500);
			yellow+=1;
		}
			while(yellow<5);
		// for Red LED
			PORTA=0b00000100;
  74:	24 e0       	ldi	r18, 0x04	; 4
    DDRA=0b00000111;
    uint8_t yellow;
    while (1) 
    {
	//for Green LED 
		PORTA=0b00000001;
  76:	3b bb       	out	0x1b, r19	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  78:	4f eb       	ldi	r20, 0xBF	; 191
  7a:	56 ec       	ldi	r21, 0xC6	; 198
  7c:	6d e2       	ldi	r22, 0x2D	; 45
  7e:	41 50       	subi	r20, 0x01	; 1
  80:	50 40       	sbci	r21, 0x00	; 0
  82:	60 40       	sbci	r22, 0x00	; 0
  84:	e1 f7       	brne	.-8      	; 0x7e <main+0x12>
  86:	00 c0       	rjmp	.+0      	; 0x88 <main+0x1c>
  88:	00 00       	nop
  8a:	85 e0       	ldi	r24, 0x05	; 5
		_delay_ms(15000);
		yellow=0;
		do{
		// yellow LED flashes 5 times 
			PORTA=0b00000010;
  8c:	9b bb       	out	0x1b, r25	; 27
  8e:	4f e9       	ldi	r20, 0x9F	; 159
  90:	56 e8       	ldi	r21, 0x86	; 134
  92:	61 e0       	ldi	r22, 0x01	; 1
  94:	41 50       	subi	r20, 0x01	; 1
  96:	50 40       	sbci	r21, 0x00	; 0
  98:	60 40       	sbci	r22, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0x28>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x32>
  9e:	00 00       	nop
			_delay_ms(500);
			PORTA=0b00000000;
  a0:	1b ba       	out	0x1b, r1	; 27
  a2:	4f e9       	ldi	r20, 0x9F	; 159
  a4:	56 e8       	ldi	r21, 0x86	; 134
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	41 50       	subi	r20, 0x01	; 1
  aa:	50 40       	sbci	r21, 0x00	; 0
  ac:	60 40       	sbci	r22, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x3c>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x46>
  b2:	00 00       	nop
  b4:	81 50       	subi	r24, 0x01	; 1
			_delay_ms(500);
			yellow+=1;
		}
			while(yellow<5);
  b6:	51 f7       	brne	.-44     	; 0x8c <main+0x20>
		// for Red LED
			PORTA=0b00000100;
  b8:	2b bb       	out	0x1b, r18	; 27
  ba:	8f eb       	ldi	r24, 0xBF	; 191
  bc:	46 ec       	ldi	r20, 0xC6	; 198
  be:	5d e2       	ldi	r21, 0x2D	; 45
  c0:	81 50       	subi	r24, 0x01	; 1
  c2:	40 40       	sbci	r20, 0x00	; 0
  c4:	50 40       	sbci	r21, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x54>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x5e>
  ca:	00 00       	nop
  cc:	d4 cf       	rjmp	.-88     	; 0x76 <main+0xa>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
